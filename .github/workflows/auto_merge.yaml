name: Auto Create Merge Request

on:
  workflow_dispatch:
  schedule:
    - cron: '10/15 * * * *'

jobs:
  Checkout_Code:
    runs-on: ubuntu-latest
    outputs:
      repo_synced: ${{ steps.check_git_status.outputs.repo_synced }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@main
        with:
            token: ${{ secrets.GH_TOKEN }}
            fetch-depth: 0

      - name: Set up Git Configurations
        run: |
          git config user.name "Lucas04-nhr"
          git config user.email "lucas04@foxmail.com"
          git config gpg.program gpg
          git config commit.gpgSign true
          git config user.signingkey ${{ secrets.GPG_PRIVATE_KEY }}
      
      - name: Pull the latest change
        run: |
          git fetch origin ${{ github.ref }}
          git merge -X theirs --allow-unrelated-histories --no-ff origin/main

      - name: Check Git Status
        id: check_git_status
        run: |
          git diff --exit-code
          echo "::set-output name=repo_synced::true"
        continue-on-error: true

  Create_Pull_Request:
    runs-on: ubuntu-latest
    needs: Checkout_Code
    steps:
      - name: Checkout "develop" branch
        if: needs.Checkout_Code.outputs['repo_synced'] == 'true'
        run: |
          git checkout -b develop origin/develop

      - name: Create pull request
        if: needs.Checkout_Code.outputs.repo_synced == 'true'
        uses: peter-evans/create-pull-request@main
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "Merge develop into main"
          title: "Merge develop into main"
          body: "This is an auto-generated pull request to merge develop into main."
          branch: main
          base: develop
          labels: auto-merge
          assignees: Lucas04-nhr
          reviewers: Lucas04-nhr
          draft: false

  Push_To_GitHub:
    runs-on: ubuntu-latest
    needs: 
      - Checkout_Code
      - Create_Pull_Request
    steps:
      - name: Set up GitHub
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Push to GitHub
        if: needs.Checkout_Code.outputs.repo_synced == 'true'
        run: |
          git fetch origin
          git push origin main
